/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.0 (2.7.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntrySerializerMinimal } from './EntrySerializerMinimal';
import {
    EntrySerializerMinimalFromJSON,
    EntrySerializerMinimalFromJSONTyped,
    EntrySerializerMinimalToJSON,
    EntrySerializerMinimalToJSONTyped,
} from './EntrySerializerMinimal';

/**
 * 
 * @export
 * @interface Relation
 */
export interface Relation {
    /**
     * 
     * @type {string}
     * @memberof Relation
     */
    readonly id?: string;
    /**
     * 
     * @type {EntrySerializerMinimal}
     * @memberof Relation
     */
    readonly e1?: EntrySerializerMinimal;
    /**
     * 
     * @type {EntrySerializerMinimal}
     * @memberof Relation
     */
    readonly e2?: EntrySerializerMinimal;
    /**
     * 
     * @type {Date}
     * @memberof Relation
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Relation
     */
    readonly lastSeen?: Date;
    /**
     * * `digest` - Digest
     * * `enrichment` - Enrichment
     * * `contains` - Contains
     * * `alias` - Alias
     * * `encounter` - Encounter
     * * `note` - Note
     * @type {string}
     * @memberof Relation
     */
    reason: RelationReasonEnum;
    /**
     * 
     * @type {any}
     * @memberof Relation
     */
    details?: any | null;
}


/**
 * @export
 */
export const RelationReasonEnum = {
    Digest: 'digest',
    Enrichment: 'enrichment',
    Contains: 'contains',
    Alias: 'alias',
    Encounter: 'encounter',
    Note: 'note'
} as const;
export type RelationReasonEnum = typeof RelationReasonEnum[keyof typeof RelationReasonEnum];


/**
 * Check if a given object implements the Relation interface.
 */
export function instanceOfRelation(value: object): value is Relation {
    if (!('reason' in value) || value['reason'] === undefined) return false;
    return true;
}

export function RelationFromJSON(json: any): Relation {
    return RelationFromJSONTyped(json, false);
}

export function RelationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Relation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'e1': json['e1'] == null ? undefined : EntrySerializerMinimalFromJSON(json['e1']),
        'e2': json['e2'] == null ? undefined : EntrySerializerMinimalFromJSON(json['e2']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'lastSeen': json['last_seen'] == null ? undefined : (new Date(json['last_seen'])),
        'reason': json['reason'],
        'details': json['details'] == null ? undefined : json['details'],
    };
}

export function RelationToJSON(json: any): Relation {
    return RelationToJSONTyped(json, false);
}

export function RelationToJSONTyped(value?: Omit<Relation, 'id'|'e1'|'e2'|'created_at'|'last_seen'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reason': value['reason'],
        'details': value['details'],
    };
}

