/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.0 (2.7.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface LspTrieRetrieveRequest {
    prefix?: string;
    type?: string;
}

/**
 * 
 */
export class LspApi extends runtime.BaseAPI {

    /**
     * Returns LSP completion trie data for entity types and types without regex/options. Used for autocomplete suggestions in the LSP interface.
     * Get LSP Completion Trie
     */
    async lspTrieRetrieveRaw(requestParameters: LspTrieRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/lsp/trie/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns LSP completion trie data for entity types and types without regex/options. Used for autocomplete suggestions in the LSP interface.
     * Get LSP Completion Trie
     */
    async lspTrieRetrieve(requestParameters: LspTrieRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.lspTrieRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns LSP type definitions grouped by subtype, excluding aliases.
     * Get LSP Types
     */
    async lspTypesRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/lsp/types/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns LSP type definitions grouped by subtype, excluding aliases.
     * Get LSP Types
     */
    async lspTypesRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.lspTypesRetrieveRaw(initOverrides);
        return await response.value();
    }

}
