/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.0 (2.7.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessEntity,
} from '../models/index';
import {
    AccessEntityFromJSON,
    AccessEntityToJSON,
} from '../models/index';

export interface AccessListRequest {
    userId: string;
}

export interface AccessRequestCreateRequest {
    entityId: string;
    entityId2: string;
    subtype?: string;
    subtype2?: string | null;
}

export interface AccessUpdateRequest {
    entityId: string;
    userId: string;
    accessType: AccessUpdateAccessTypeEnum;
}

/**
 * 
 */
export class AccessApi extends runtime.BaseAPI {

    /**
     * Returns a list of all entities with their access types for a specific user. Only available to admin users.
     * Get user access privileges
     */
    async accessListRaw(requestParameters: AccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccessEntity>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling accessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/access/{user_id}/`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccessEntityFromJSON));
    }

    /**
     * Returns a list of all entities with their access types for a specific user. Only available to admin users.
     * Get user access privileges
     */
    async accessList(requestParameters: AccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccessEntity>> {
        const response = await this.accessListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a user to request access for an entity. All users with read-write access for that specific entity will receive a notification. If the user making the request already has read-write access, no notifications are sent but the request is deemed successful.
     * Request access to entity
     */
    async accessRequestCreateRaw(requestParameters: AccessRequestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['entityId'] == null) {
            throw new runtime.RequiredError(
                'entityId',
                'Required parameter "entityId" was null or undefined when calling accessRequestCreate().'
            );
        }

        if (requestParameters['entityId2'] == null) {
            throw new runtime.RequiredError(
                'entityId2',
                'Required parameter "entityId2" was null or undefined when calling accessRequestCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['entityId2'] != null) {
            formParams.append('entity_id', requestParameters['entityId2'] as any);
        }

        if (requestParameters['subtype2'] != null) {
            formParams.append('subtype', requestParameters['subtype2'] as any);
        }


        let urlPath = `/access/request/{entity_id}/`;
        urlPath = urlPath.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters['entityId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Allows a user to request access for an entity. All users with read-write access for that specific entity will receive a notification. If the user making the request already has read-write access, no notifications are sent but the request is deemed successful.
     * Request access to entity
     */
    async accessRequestCreate(requestParameters: AccessRequestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.accessRequestCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user\'s access privileges for a specific entity. Admin users can update access for non-admin users. Users with read-write access can update access for non-admin users who don\'t have read-write access.
     * Update user access for entity
     */
    async accessUpdateRaw(requestParameters: AccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['entityId'] == null) {
            throw new runtime.RequiredError(
                'entityId',
                'Required parameter "entityId" was null or undefined when calling accessUpdate().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling accessUpdate().'
            );
        }

        if (requestParameters['accessType'] == null) {
            throw new runtime.RequiredError(
                'accessType',
                'Required parameter "accessType" was null or undefined when calling accessUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['accessType'] != null) {
            formParams.append('access_type', requestParameters['accessType'] as any);
        }


        let urlPath = `/access/{user_id}/{entity_id}/`;
        urlPath = urlPath.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters['entityId'])));
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates a user\'s access privileges for a specific entity. Admin users can update access for non-admin users. Users with read-write access can update access for non-admin users who don\'t have read-write access.
     * Update user access for entity
     */
    async accessUpdate(requestParameters: AccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.accessUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AccessUpdateAccessTypeEnum = {
    None: 'none',
    Read: 'read',
    ReadWrite: 'read-write'
} as const;
export type AccessUpdateAccessTypeEnum = typeof AccessUpdateAccessTypeEnum[keyof typeof AccessUpdateAccessTypeEnum];
