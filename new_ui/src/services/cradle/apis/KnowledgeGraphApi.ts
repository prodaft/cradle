/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.0 (2.7.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Entry,
  GraphInaccessibleResponse,
  SubGraph,
} from '../models/index';
import {
    EntryFromJSON,
    EntryToJSON,
    GraphInaccessibleResponseFromJSON,
    GraphInaccessibleResponseToJSON,
    SubGraphFromJSON,
    SubGraphToJSON,
} from '../models/index';

export interface KnowledgeGraphFetchRetrieveRequest {
    src: number;
    depth?: number;
    pageSize?: number;
}

export interface KnowledgeGraphInaccessibleRetrieveRequest {
    src: string;
    depth?: number;
}

export interface KnowledgeGraphNeighborsListRequest {
    src: string;
    depth?: number;
    pageSize?: number;
    query?: string;
    wildcard?: boolean;
}

export interface KnowledgeGraphPathfindCreateRequest {
    src: number;
    dsts: Array<number>;
    minDate: Date;
    maxDate: Date;
}

/**
 * 
 */
export class KnowledgeGraphApi extends runtime.BaseAPI {

    /**
     * Fetch graph data with entries and edges for visualization.
     * Fetch knowledge graph data
     */
    async knowledgeGraphFetchRetrieveRaw(requestParameters: KnowledgeGraphFetchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubGraph>> {
        if (requestParameters['src'] == null) {
            throw new runtime.RequiredError(
                'src',
                'Required parameter "src" was null or undefined when calling knowledgeGraphFetchRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['src'] != null) {
            queryParameters['src'] = requestParameters['src'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/knowledge-graph/fetch/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubGraphFromJSON(jsonValue));
    }

    /**
     * Fetch graph data with entries and edges for visualization.
     * Fetch knowledge graph data
     */
    async knowledgeGraphFetchRetrieve(requestParameters: KnowledgeGraphFetchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubGraph> {
        const response = await this.knowledgeGraphFetchRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get entries in the knowledge graph that are inaccessible to the current user.
     * Get inaccessible graph entries
     */
    async knowledgeGraphInaccessibleRetrieveRaw(requestParameters: KnowledgeGraphInaccessibleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraphInaccessibleResponse>> {
        if (requestParameters['src'] == null) {
            throw new runtime.RequiredError(
                'src',
                'Required parameter "src" was null or undefined when calling knowledgeGraphInaccessibleRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        if (requestParameters['src'] != null) {
            queryParameters['src'] = requestParameters['src'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/knowledge-graph/inaccessible/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphInaccessibleResponseFromJSON(jsonValue));
    }

    /**
     * Get entries in the knowledge graph that are inaccessible to the current user.
     * Get inaccessible graph entries
     */
    async knowledgeGraphInaccessibleRetrieve(requestParameters: KnowledgeGraphInaccessibleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraphInaccessibleResponse> {
        const response = await this.knowledgeGraphInaccessibleRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get neighboring entries in the knowledge graph for a given source entry.
     * Get graph neighbors
     */
    async knowledgeGraphNeighborsListRaw(requestParameters: KnowledgeGraphNeighborsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Entry>>> {
        if (requestParameters['src'] == null) {
            throw new runtime.RequiredError(
                'src',
                'Required parameter "src" was null or undefined when calling knowledgeGraphNeighborsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['src'] != null) {
            queryParameters['src'] = requestParameters['src'];
        }

        if (requestParameters['wildcard'] != null) {
            queryParameters['wildcard'] = requestParameters['wildcard'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/knowledge-graph/neighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntryFromJSON));
    }

    /**
     * Get neighboring entries in the knowledge graph for a given source entry.
     * Get graph neighbors
     */
    async knowledgeGraphNeighborsList(requestParameters: KnowledgeGraphNeighborsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Entry>> {
        const response = await this.knowledgeGraphNeighborsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find paths between source and destination entries in the knowledge graph.
     * Find paths in knowledge graph
     */
    async knowledgeGraphPathfindCreateRaw(requestParameters: KnowledgeGraphPathfindCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubGraph>> {
        if (requestParameters['src'] == null) {
            throw new runtime.RequiredError(
                'src',
                'Required parameter "src" was null or undefined when calling knowledgeGraphPathfindCreate().'
            );
        }

        if (requestParameters['dsts'] == null) {
            throw new runtime.RequiredError(
                'dsts',
                'Required parameter "dsts" was null or undefined when calling knowledgeGraphPathfindCreate().'
            );
        }

        if (requestParameters['minDate'] == null) {
            throw new runtime.RequiredError(
                'minDate',
                'Required parameter "minDate" was null or undefined when calling knowledgeGraphPathfindCreate().'
            );
        }

        if (requestParameters['maxDate'] == null) {
            throw new runtime.RequiredError(
                'maxDate',
                'Required parameter "maxDate" was null or undefined when calling knowledgeGraphPathfindCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['src'] != null) {
            formParams.append('src', requestParameters['src'] as any);
        }

        if (requestParameters['dsts'] != null) {
            formParams.append('dsts', requestParameters['dsts']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['minDate'] != null) {
            formParams.append('min_date', (requestParameters['minDate'] as any).toISOString());
        }

        if (requestParameters['maxDate'] != null) {
            formParams.append('max_date', (requestParameters['maxDate'] as any).toISOString());
        }


        let urlPath = `/knowledge-graph/pathfind/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubGraphFromJSON(jsonValue));
    }

    /**
     * Find paths between source and destination entries in the knowledge graph.
     * Find paths in knowledge graph
     */
    async knowledgeGraphPathfindCreate(requestParameters: KnowledgeGraphPathfindCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubGraph> {
        const response = await this.knowledgeGraphPathfindCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
