/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.0 (2.7.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileDownload,
  FileUpload,
} from '../models/index';
import {
    FileDownloadFromJSON,
    FileDownloadToJSON,
    FileUploadFromJSON,
    FileUploadToJSON,
} from '../models/index';

export interface FileTransferDownloadRetrieveRequest {
    bucketName: string;
    minioFileName: string;
}

export interface FileTransferProcessCreateRequest {
    fileId: string;
}

export interface FileTransferUploadRetrieveRequest {
    fileName: string;
}

/**
 * 
 */
export class FileTransferApi extends runtime.BaseAPI {

    /**
     * Generates a presigned URL that allows clients to download files from Minio without requiring credentials. The URL expires after 7 days.
     * Get file download URL
     */
    async fileTransferDownloadRetrieveRaw(requestParameters: FileTransferDownloadRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDownload>> {
        if (requestParameters['bucketName'] == null) {
            throw new runtime.RequiredError(
                'bucketName',
                'Required parameter "bucketName" was null or undefined when calling fileTransferDownloadRetrieve().'
            );
        }

        if (requestParameters['minioFileName'] == null) {
            throw new runtime.RequiredError(
                'minioFileName',
                'Required parameter "minioFileName" was null or undefined when calling fileTransferDownloadRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bucketName'] != null) {
            queryParameters['bucketName'] = requestParameters['bucketName'];
        }

        if (requestParameters['minioFileName'] != null) {
            queryParameters['minioFileName'] = requestParameters['minioFileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file-transfer/download/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDownloadFromJSON(jsonValue));
    }

    /**
     * Generates a presigned URL that allows clients to download files from Minio without requiring credentials. The URL expires after 7 days.
     * Get file download URL
     */
    async fileTransferDownloadRetrieve(requestParameters: FileTransferDownloadRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDownload> {
        const response = await this.fileTransferDownloadRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggers processing for a file that has been uploaded to MinIO.
     * Process an uploaded file
     */
    async fileTransferProcessCreateRaw(requestParameters: FileTransferProcessCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling fileTransferProcessCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileId'] != null) {
            formParams.append('file_id', requestParameters['fileId'] as any);
        }


        let urlPath = `/file-transfer/process/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Triggers processing for a file that has been uploaded to MinIO.
     * Process an uploaded file
     */
    async fileTransferProcessCreate(requestParameters: FileTransferProcessCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileTransferProcessCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates a presigned URL that allows uploading a file to MinIO storage without requiring credentials. The URL expires after 5 minutes.
     * Generate file upload URL
     */
    async fileTransferUploadRetrieveRaw(requestParameters: FileTransferUploadRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileUpload>> {
        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling fileTransferUploadRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fileName'] != null) {
            queryParameters['fileName'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file-transfer/upload/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileUploadFromJSON(jsonValue));
    }

    /**
     * Generates a presigned URL that allows uploading a file to MinIO storage without requiring credentials. The URL expires after 5 minutes.
     * Generate file upload URL
     */
    async fileTransferUploadRetrieve(requestParameters: FileTransferUploadRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileUpload> {
        const response = await this.fileTransferUploadRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
