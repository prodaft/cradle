openapi: 3.0.3
info:
  title: CRADLE Backend API
  version: 1.0.0
  description: API for handling requests for the backend of the CRADLE project
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/diacicov.calin/CRADLE/1.0.0
  - description: Localhost
    url: 'https://localhost:8000'
tags:
  - name: User
    description: Operations targeting a user's account.
  - name: Admin
    description: Administrative operations.
  - name: Access
    description: Handles Case-Level Access
  - name: Entity
    description: Operations targeting Entities.
  - name: Note
    description: Operations targeting Notes.
  - name: Fleeting Note
    description: Operations targeting Fleeting Notes.
  - name: Knowledge Graph
    description: Operations targeting the Knowledge Graph.
  - name: Query
    description: Operations for fetching entities.
  - name: Dashboard
    description: Operations targeting the dashboard.
  - name: File Transfer
    description: Operations targeting the transfer of files.
  - name: Notification 
    description: Operations regarding notifications
  
paths:
  /users:
    post:
      security: []
      tags:
        - User
      summary: Create account
      description: Allows a user to create a new account, by sending a request with their username, password and email. This will be checked for validity and, if accepted, this new account will be added to the database, allowing the user to connect using the same credentials in the future
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: If the request was successful or the email is valid, but already exists.
        '400':
          description: The request does not match the specified format.
        '409':
          description: User already exists

    get:
      tags:
        - Admin
        - User
      
      summary: Read list of all users
      description: Allow an admin to view a list including all users of the application. # Do we want filters here?
     
      responses:
        '200':
          description: Returns a list of all users.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: User is not authenticated.
        '403':
          description: User is not an admin.


  /users/{userId}:
    delete:
      tags:
        - User
        - Admin
      summary: Delete a user
      description: The admin can use this to delete the account with id userId
      operationId: deleteAccount
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            userIdExample:
              value: "1296348"
      responses:
        '200':
          description: Requested user account was deleted.
        '401':
          description: User is not authenticated.
        '403':
          description: User is not an admin.
        '404':
          description: There is no user with specified ID.

  /users/login:
    post:
      tags:
        - User
      security: []
      summary: Log into account
      description: Allows a user to log into their account, by sending a request with their username and password. This will be checked for validity and, if accepted, this user will be logged in and a session will be created
      operationId: accountLogin
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: >
            Successfully authenticated.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionid=thisissecret;
        '400': 
          description: >
            The request does not match the specified format. 
        '401':
          description: >
            The credentials given are invalid. 
            

  /notifications/:
    get:
      tags:
        - Notification
      summary: Get user's notifications
      description: Fetches all of the user's notifications. The notifications are sorted from the newest to the oldest one.
      operationId: getNotifications
      responses:
        '200':
          description: Returns a list of all notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/MessageNotification'
                    - $ref: '#/components/schemas/AccessRequestNotification'
        '401':
          description: User is not authenticated.

  /notifications/unread-count:
    get:
      tags:
        - Notification
      summary: Get amount of unread notifications
      description: Returns the number of unread notifications that a user has. A notification is considered unread when `is_marked_unread OR is_unread` is true.
      operationId: countUnreadNotifications
      responses:
        '200':
          description: Returns the amount of unread notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                required:
                  - count
        '401':
          description: User is not authenticated.

  /notifications/{notificationId}:
    put:
      tags:
        - Notification
      summary: Update a notification's is_marked_unread field.
      description: Updates the notification's `is_marked_unread` field. Should be used when the client wishes to explicitely mark a notification as read/unread.
      operationId: updateNotifications
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - is_marked_unread
              properties:
                is_marked_unread:
                  type: boolean
      responses:
        '200':
          description: The notification was updated successfully.
        '400':
          description: Request body is invalid.
        '401':
          description: User is not authenticated.
        '404':
          description: The notification does not exist or is not owned by the user.

  /entities/actors:
    get:
      tags:
        - Entity
        - Admin
      summary: Read details of all Actors
      description: Allow a user to retrieve the details of all Actors
      operationId: getActors
      responses:
        '200':
          description: Request is successful.
          content: 
            'application/json':
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Entity'
        '401':
          description: User is not authenticated.
        '403':
          description: User is not an admin.

    post:
      tags:
        - Entity
        - Admin
      summary: Create Actor
      description: Allow an admin to create a new Actor by specifying its name
      operationId: createActor
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description: 
                  type: string
      responses:
        '200': 
          description: Agent has been added. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/Entity'
        '401': 
          description: User is not authenticated.
        '403': 
          description: User is not an admin.
        '404':
          description: Invalid data provided
        '409':
          description: Actor already exists.
            

  /entities/cases:
    get:
      tags:
        - Admin
        - Entity
      summary: Read details of all Cases
      description: Allow a user to retrieve the details of all Cases
      operationId: getCases
      responses:
        '200': 
          description: Agent has been added. 
          content: 
            'application/json':
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Entity'
        '401': 
          description: User is not authenticated.
        '403': 
          description: User is not an admin.

    post:
      tags:
        - Entity
        - Admin
      summary: Create Case
      description: Allow an admin to create a new Case by specifying its name
      operationId: createCase
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200': 
          description: Case has been added. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/Entity'
        '401': 
          description: User is not authenticated.
        '403': 
          description: User is not an admin.
        '404':
          description: Invalid data provided
        '409':
          description: Case already exists.
  
  /dashboards/cases/{case_name}:
    get:
      tags:
        - Dashboard
      summary: Get the dashboard of a Case
      description: Allow a user to retrieve the dashboard of a Case by specifying its name
      operationId: getCaseByName
      parameters:
        - in: path
          name: case_name
          required: true
          schema:
            type: string
          examples:
            caseNameExample:
              value: "Case1"
      responses:
        '200': 
          description: Request was successful. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/CaseDashboard'
        '401': 
          description: User is not authenticated.
        '404':
          description: Case not found or User doesn't have access.
  
  /dashboards/actors/{actor_name}:
    get:
      tags:
        - Dashboard
      summary: Get the dashboard of an Actor
      description: Allow a user to retrieve the dashboard of an Actor by specifying its name
      operationId: getActorByName
      parameters:
        - in: path
          name: actor_name
          required: true
          schema:
            type: string
          examples:
            caseNameExample:
              value: "Actor"
      responses:
        '200': 
          description: Request was successful. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/ActorDashboard'
        '401': 
          description: User is not authenticated.
        '404':
          description: Actor not found.
  
  /dashboards/entries/{entry_name}:
    get:
      tags:
        - Dashboard
      summary: Get the dashboard of an Entry
      description: Allow a user to retrieve the dashboard of an Entry by specifying its name
      operationId: getEntryByName
      parameters:
        - in: path
          name: entry_name
          required: true
          schema:
            type: string
          examples:
            caseNameExample:
              value: "Entry"
        - in: query
          name: subtype
          required: true
          schema:
            type: string
          examples:
            caseNameExample:
              value: "ip"
      responses:
        '200': 
          description: Request was successful. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/EntryDashboard'
        '401': 
          description: User is not authenticated.
        '404':
          description: Entry not found.

  /access/{userId}:
    get:
      tags:
        - Access
        - Admin
      summary: Get access privileges of a users.
      responses:
        '200': 
          description: Request was successful.
          content:
            'application/json':
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/CaseAccess"
        '400':
          description: Request is invalid
        '401':
          description: User is not authenticated.
        '403': 
          description: User is not an admin.
        '404':
          description: User not found.


  /access/request/{caseId}:
    post:
      tags:
        - Access
      summary: Requests access for a case.
      description: Allows a user to request access for a Case. All users with read-write access for that specific Case will receive a Notification. If the user making the request already has read-write access, no Notifications are sent but the request is deemed successful.
      operationId: requestAccessForCase
      responses:
        '200': 
          description: Request was successful.
        '401':
          description: User is not authenticated.
        '404':
          description: Case not found.


  /access/{userId}/{caseId}:
    put:
      tags:
        - Access
      summary: Update access of a user
      description: Allows a user to change the access privileges of another user for the specified case. If the user making the request is an admin, they can change the permission of any other non-admin user. If the user making the request has read-write access for the specified case, they can change the mentioned user's access if that user does not already have read-write access and if they are not an admin. Otherwise, they are not allowed to perform the operation.
      operationId: updateUserAccess
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            userIdExample:
              value: 1234521
        - in: path
          name: caseId
          required: true
          schema: 
            type: integer
            format: int64
          examples: 
            caseIdExample:
              value: 123412
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - access_type
              properties:
                access_type:
                  $ref: "#/components/schemas/Access"
      responses:
        '200': 
          description: Access was updated. 
        '401': 
          description: User is not authenticated. 
        '403': 
          description: User is not an admin. 
            

  /entities/actors/{actorId}:
    delete:
      tags:
        - Entity
        - Admin
      summary: Delete Actor
      description: Allow an admin to delete an Actor by specifying its id
      operationId: deleteActor
      parameters:
        - in: path
          name: agentId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            agentIdExample:
              value: "29423461"
      responses:
        '200':
          description: Requested agent was deleted.
        '401':
          description: User is not authenticated.
        '403':
          description: User is not an admin.
        '404':
          description: There is no agent with specified ID.
            


  /entities/cases/{caseId}:
    delete:
      tags:
        - Entity
        - Admin
      summary: Delete Case
      description: Allow an admin to delete a Case by specifying its id
      operationId: deleteCase
      parameters:
        - in: path
          name: caseId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            caseIdExample:
              value: 2341963112
      responses:
        '200':
          description: Requested case was deleted.
        '401':
          description: User is not authenticated.
        '403':
          description: User is not an admin.
        '404':
          description: There is no case with specified ID.

  /notes:
    post:
      tags:
        - Note
      summary: Create a new Note
      description: Allow a user to create a new note, by sending the text itself. This text should be validated to meet the requirements (i.e. reference at least two Entities, one of which must be a Case).
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200': 
          description: Note was created. 
          content: 
            'application/json':
              schema: 
               $ref: '#/components/schemas/Note'
        '400': 
          description: Note does not reference at least one Case and two Entities. 
        '401': 
          description: User is not authenticated.
        '404': 
          description: User does not have Read-Write access to a referenced Case or not all Cases exist.

  /notes/{noteId}/publishable:
    put:
      tags:
        - Note
      summary: Update a Note's publishable status
      description: Allow a user to change a Note's publishable status, from publishable to not publishable or vice versa
      operationId: updateNoteIsPublishable
      parameters:
        - in: path
          name: noteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            caseIdExample:
              value: 1234163
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - publishable
              properties:
                publishable:
                  type: boolean
      responses:
        '200':  
          description: Note was made publishable.
        '400':
          description: Request body is invalid.
        '401': 
          description: User is not authenticated.
        '403': 
          description: User cannot make a Note he does not own publishable.
        '404':
          description: Note not found. 

  /notes/{noteId}:
    delete:
      tags:
        - Note
      summary: Delete Note
      description: Allow a user to delete a Note by specifying its id
      operationId: deleteNote
      parameters:
        - in: path
          name: noteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            caseIdExample:
              value: 12643969
      responses:
        '200':  
          description: Note was deleted.
        '401': 
          description: User is not authenticated.
        '403': 
          description: User cannot delete a Note if they do not have Read-Write access to the referenced case.
        '404':
          description: Note not found.
    get:
      tags:
        - Note
      summary: Read note
      description: Allow the user the get data about a note, by specifying its id
      operationId: publishPreview
      parameters:
        - in: path
          name: noteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            noteIdExample:
              value: 31249691
      responses:
        '200':  
          description: Request was successful.
          content: 
            'application/json':
              schema: 
               $ref: '#/components/schemas/Note'
        '401': 
          description: User is not authenticated.
        '404': 
          description: User does not have read access to the requested note or the requested note does not exist.
        
  /notes/publish:
    get:
      tags:
        - Note
      summary: Publish a list of notes. 
      description: Allows a user to publish a list of notes, in the specified order.
      operationId: publishNotes
      parameters:
        - in: query
          name: note_ids
          required: true
          style: form
          explode: true
          schema:
            type: array
            items: 
              type: integer
              format: int64
          examples:
            single-note:
              summary: Single note ID
              value: [1]
            multiple-notes:
              summary: Multiple note IDs
              value: [1, 2, 3]
              
      responses:
        '200': 
          description: Request was succesful.
          content:
            'application/json':
              schema: 
                $ref: '#/components/schemas/Report'
        '400': 
          description: The format is invalid.
        '401': 
          description: The user is not authenticated. 
        '403': 
          description: The user tries to publish unpublishable notes. 
        '404': 
          description: The user does not have read access to all the provided notes or some of the notes do not exist.
  
  /file-transfer/upload:
    get:
      tags:
        - File Transfer
      summary: Generates a link for uploading files to Minio.
      description: Generate a new UUID which concatenated with the original file name describe the path where the user should upload a new file. Provides a presigned put URL that allows the client to make this transfer without requiring the Minio credentials.
      operationId: fileUpload
      parameters:
        - in: query
          name: fileName
          required: true
          schema:
            type: string
          examples:
            fileNameExample:
              value: "evidence.png"
      responses:
        '200':  
          description: Request was succesful.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  bucket_name:
                    type: string
                    example: "admin"
                  minio_file_name:
                    type: string
                    example: "be0b24ad-ae54-4952-ae87-00011ed9df27-evidence.png"
                  presigned:
                    type: string
                    example: "http://127.0.0.1:9000/admin/be0b24ad-ae54-4952-ae87-00011ed9df27-evidence.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=minioadmin%2F20240601%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240601T140856Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&X-Amz-Signature=4e4a63377975d20947da99ec8d9ca97f1ece9fc713f4e11d1e982391492b4a4b"
        '400': 
          description: Query parameters are invalid.
        '401': 
          description: User is not authenticated.

  /file-transfer/download:
    get:
      tags:
        - File Transfer
      summary: Generates a link for downloading files from Minio.
      description: Provides a presigned download URL that allows clients to download files from Minio without requiring the credentials.
      operationId: fileDownload
      parameters:
        - in: query
          name: bucketName
          required: true
          schema:
            type: string
          examples:
            bucketNameExample:
              value: "admin"
        - in: query
          name: minioFileName
          required: true
          schema:
            type: string
          examples:
            minioFileNameExample:
              value: "be0b24ad-ae54-4952-ae87-00011ed9df27-evidence.png"
      responses:
        '200':  
          description: Request was succesful.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  presigned:
                    type: string
                    example: "http://127.0.0.1:9000/admin/be0b24ad-ae54-4952-ae87-00011ed9df27-evidence.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=minioadmin%2F20240601%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240601T140856Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&X-Amz-Signature=4e4a63377975d20947da99ec8d9ca97f1ece9fc713f4e11d1e982391492b4a4b"
        '400': 
          description: Query parameters are invalid.
        '401': 
          description: User is not authenticated.
        '404':
          description: The requested resource does not exist.


  /fleeting-notes:
    get:
      tags:
        - Fleeting Note
      summary: Get all fleeting notes of the user
      description: Get all the FleetingNotes that belong to the authenticated user.
        FleetingNotes are ordered by last_edited in descending order.
        FleetingNotes are truncated to 200 characters for preview.
      operationId: getAllFleetingNotes
      responses: 
        '200': 
          description: Request was successful. 
          content:
            'application/json': 
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/FleetingNote"
        '401': 
          description: User is not authenticated.
        

    post:
      tags:
        - Fleeting Note
      summary: Create a Fleeting Note
      description: Create a new FleetingNote entity based on the request data.
        The user field is set to correspond to the authenticated user.
      operationId: createFleetingNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200': 
          description: Fleeting note was created. 
          content:
            'application/json': 
              schema: 
                $ref: "#/components/schemas/FleetingNote"
        '400': 
          description: The request does not respect the specified format. 
        '401':
          description: User is not authenticated.
        
  /fleeting-notes/{fleetingNoteId}:
    get:
      tags:
        - Fleeting Note
      summary: Get the content of a fleeting note
      description: Get a FleetingNote entity by its primary key.
        Only the owner of the FleetingNote entity can access it.
      operationId: getFleetingNote
      parameters:
        - in: path
          name: fleetingNoteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            fleetingNoteIdExample:
              value: 234196123
      responses:
        '200': 
          description: Request was successful. 
          content: 
            'application/json':
              schema: 
                $ref: '#/components/schemas/FleetingNote'
        '401': 
          description: User is not authenticated.
        '404':
          description: Fleeting note not found.
    delete:
      tags:
        - Fleeting Note
      summary: Delete a certain fleeting note
      description: Delete a FleetingNote entity by its primary key.
        Only the owner of the FleetingNote entity can delete it.
      operationId: deleteFleetingNote
      parameters:
        - in: path
          name: fleetingNoteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            fleetingNoteIdExample:
              value: 12341123
      responses:
        '200':  
          description: Fleeting Note was deleted.
        '401': 
          description: User is not authenticated.
        '404':
          description: The Fleeting Note does not exist or is not owned by user.
    put:
      tags:
        - Fleeting Note
      summary: Update a Fleeting Note
      description: Update a FleetingNote entity by its primary key.
        Only the owner of the FleetingNote entity can update it.
      operationId: updateFleetingNote
      parameters:
        - in: path
          name: fleetingNoteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            fleetingNoteIdExample:
              value: 2324169
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':  
          description: Fleeting Note was updated.
        '401': 
          description: User is not authenticated.
        '404':
          description: Fleeting Note not found or not owned by user.
          
  /fleeting-notes/{fleetingNoteId}/final/:
    put:
      tags:
          - Fleeting Note
      summary: Transform a Fleeting Note to a Note. 
      description: Allow a user to save the contents of a fleeting note as a normal note. 
        The user must be the owner of the Fleeting Note.
        Optionally the user can specify if the note is publishable. If not specified, the note is not publishable.
        The fleeting note is deleted after the transformation.
      operationId: finalizeNote
      parameters:
        - in: path
          name: fleetingNoteId
          required: true
          schema:
            type: integer
            format: int64
          examples:
            fleetingNoteIdExample:
              value: 2324169
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                publishable:
                  type: boolean
      responses:
        '200': 
          description: Fleeting Note was transformed. 
          content: 
            'application/json':
              schema: 
               $ref: '#/components/schemas/Note'
        '400': 
          description: Note does not reference at least one Case and two Entities. 
        '401': 
          description: User is not authenticated. 
        '404': 
          description: User does not have Read-Write access to a referenced Case or not all Cases and Actors exist / The Fleeting Note does not exist or was not written by the user 
    
  
  /query:
    get:
      tags:
        - Query
      summary: Search for entities
      description: Allow a user to query for any entity they have access, by providing a name, its type and, if it is an Entry, its subtype
      operationId: searchEntity
      parameters:
        - in: query
          name: entityType
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum: 
            - actor
            - case
            - entry
          examples:
            typeExample:
              value: "ip"
        - in: query
          name: entitySubtype
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum: 
            - ip
            - domain
            - url
            - username
            - password
            - person
            - social-media
            - hash
            - tool 
            - cve
            - ttp 
          examples:
            typeExample:
              value: "ip"
        - in: query
          name: name
          required: false
          schema:
            type: string
          examples:
            nameExample:
              value: "127.0.0.1"
      responses:
        '200': 
          description: Request was succesful.
        '400':
          description: Query parameters are invalid.
        '401':
          description: User is not authenticated.

  /graph:
    get:
      tags:
        - Knowledge Graph
      summary: Show Knowledge Graph
      description: "Allow a user to view the Knowledge Graph containing all Entities they can access. The Knowledge Graph is represented as two arrays: 'entities' and 'links'. The 'entities' array contains a list ofentities which are connected using notes the User has access to, while the 'links' array contains pairs of id's, each link representing a connection between two entities through a note visible to the user."
      operationId: showKnowledgeGraph
      responses:
        '200': 
          description: Request is successful.
          content: 
            'application/json':
              schema: 
                $ref: "#/components/schemas/Graph"
        '401': 
          description: User is not authenticated. 
      
            

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid

  schemas:
    CaseDashboard:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: 
          - case
        subtype:
          type: string
          enum: 
            - ip
            - domain
            - url
            - username
            - password
            - person
            - social-media
            - hash
            - tool 
            - cve
            - ttp
        notes:
          type: array
          items: 
            $ref: "#/components/schemas/Note"
        actors:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        metadata:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        entries:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        inaccessible_cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        access: 
          type: string
          enum: 
          - none
          - read
          - read-write
    
    ActorDashboard:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: 
          - actor
        subtype:
          type: string
          enum: 
            - ip
            - domain
            - url
            - username
            - password
            - person
            - social-media
            - hash
            - tool 
            - cve
            - ttp
        notes:
          type: array
          items: 
            $ref: "#/components/schemas/Note"
        actors:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        metadata:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        inaccessible_cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
    
    EntryDashboard:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: 
          - actor
        subtype:
          type: string
          enum: 
            - ip
            - domain
            - url
            - username
            - password
            - person
            - social-media
            - hash
            - tool 
            - cve
            - ttp
        notes:
          type: array
          items: 
            $ref: "#/components/schemas/Note"
        cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        inaccessible_cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
    
    User:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        cases:
          type: array
          items: 
            $ref: "#/components/schemas/Entity"

    Entity:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        name:
          type: string
        description: 
          type: string
        type:
          type: string
          enum: 
          - actor
          - case
          - entry
          - metadata
        subtype:
          type: string
          enum: 
            - ip
            - domain
            - url
            - username
            - password
            - person
            - social-media
            - hash
            - tool 
            - cve
            - ttp

    Access:
      type: string
      enum:
        - none
        - read
        - read-write
    
    Note:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        content: 
          type: string
        publishable:
          type: boolean
        timestamp: 
          type: string
          format: date-time
        entities:
          type: array
          items: 
            type: object
            properties:
              ID:
                type: integer
                format: int64
              name:
                type: string
              type:
                type: string
              subtype:
                type: string
    
    CaseAccess:
      type: object
      properties:
        ID: 
          type: integer
          format: int64
        name: 
          type: string
        access_type:
          type: string
          enum:
          - none
          - read
          - read-write

    FleetingNote:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        content:
          type: string
        last_edited:
          type: string
          format: date-time

    MessageNotification: 
      type: object
      properties: 
        id: 
          type: integer
          format: int64
        message:
          type: string
        timestamp: 
          type: string
          format: date-time
        is_marked_unread:
          type: string
        notification_type:
          enum:
            - message_notification

    AccessRequestNotification: 
      type: object
      properties: 
        id: 
          type: integer
          format: int64
        message:
          type: string
        case_id:
          type: integer
          format: int64
        requesting_user_id:
          type: integer
          format: int64
        timestamp: 
          type: string
          format: date-time
        is_marked_unread:
          type: string
        notification_type:
          enum:
            - request_access_notification

    ExportType:
      type: string
      enum:
        - pdf
        - html
        - json

    Report: 
      type: object
      properties: 
        actors: 
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        cases: 
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        entries: 
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        metadata: 
          type: array
          items: 
            $ref: "#/components/schemas/Entity"
        notes:
          type: array
          items: 
            $ref: "#/components/schemas/Note"
      
    Link: 
      type: object
      properties: 
        source:
          type: integer
          format: int64
        target:
          type: integer
          format: int64
      example: 
          source: 1234567890123456
          target: 9876543210987654


    Graph:
      type: object
      properties: 
        entities: 
          type: array
          items: 
            type: object
            $ref: "#/components/schemas/Entity"
        links:
          type: array
          items: 
            type: object
            $ref: "#/components/schemas/Link"

security:
  - cookieAuth: []