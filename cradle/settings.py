import django_stubs_ext

django_stubs_ext.monkeypatch()

"""
Django settings for cradle project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from typing import List

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "CRADLE_SECRET_KEY",
    "django-insecure-0in+njnc5mjf3xuh$yjy+$s@78-!9rh$qjzv@aqw+*c$zh&d*&",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not os.environ.get("CRADLE_PRODUCTION", False)

ALLOWED_HOSTS: List[str] = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(
    ","
)

# CORS_ALLOW_HEADERS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True


# Application definition
INSTALLED_APPS = [
    "corsheaders",
    "lsp.apps.LspConfig",
    "cradle_statistics.apps.CradleStatisticsConfig",
    "notifications.apps.NotificationsConfig",
    "logs.apps.LogsConfig",
    "file_transfer.apps.FileTransferConfig",
    "query.apps.QueryConfig",
    "dashboards.apps.DashboardsConfig",
    "access.apps.AccessConfig",
    "entries.apps.EntriesConfig",
    "fleeting_notes.apps.FleetingNotesConfig",
    "user.apps.UserConfig",
    "notes.apps.NotesConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


def get_log_directory():
    """Get the log directory for the application.
    This is /var/log/cradle/ if /var/log/ exists and is writable,
    and cradle/ can be created in it. Otherwise, it is the BASE_DIR.

    Args:

    Returns:
        str: The log directory for the application.
    """
    log_dir = "/var/log/"
    cradle_log_dir = "/var/log/cradle/"
    if os.path.exists(log_dir) and os.access(log_dir, os.W_OK):
        if not os.path.exists(cradle_log_dir):
            try:
                os.mkdir(cradle_log_dir)
            except OSError:
                return str(BASE_DIR)
        return cradle_log_dir
    return str(BASE_DIR)


log_directory = get_log_directory()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "success_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(log_directory, "success.log"),
        },
        "error_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(log_directory, "error.log"),
        },
    },
    "loggers": {
        "django.success": {
            "handlers": ["success_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.error": {
            "handlers": ["error_file"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.JSONParser",
    ),
}

SIMPLE_JWT = {
    "TOKEN_OBTAIN_SERIALIZER": "user.serializers.TokenObtainSerializer",
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME": timedelta(days=30),
    "SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME_LATE_USER": timedelta(days=30),
}

ROOT_URLCONF = "cradle.urls"

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SAMESITE = "None"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cradle.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRES_DB"],
        "USER": os.environ["POSTGRES_USER"],
        "PASSWORD": os.environ["POSTGRES_PASSWORD"],
        "HOST": os.environ["POSTGRES_HOST"],
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "user.CradleUser"

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


## Application Specific Config

ALLOW_REGISTRATION = True
AUTOREGISTER_ARTIFACT_TYPES = False
MIN_ENTRY_COUNT_PER_NOTE = 2
MIN_ENTITY_COUNT_PER_NOTE = 1


SMTP_USERNAME = ""
SMTP_PASSWORD = ""
SMTP_HOST = ""
SMTP_PORT = ""
