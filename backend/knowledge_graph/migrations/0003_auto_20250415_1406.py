# Generated by Django 5.0.4 on 2025-04-15 14:06

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("knowledge_graph", "0002_auto_20250402_1248"),
        ("entries", "0049_relation_inherit_av"),
    ]

    operations = [
        migrations.RunSQL(
            sql="DROP MATERIALIZED VIEW IF EXISTS edges;",
            reverse_sql=migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            sql="""
            DROP MATERIALIZED VIEW IF EXISTS entry_access;

            CREATE MATERIALIZED VIEW entry_access AS
            SELECT
                entry_id,
                BIT_AND(access_vector) AS access_vector
            FROM (
                SELECT e1_id AS entry_id, access_vector FROM entries_relation
                UNION ALL
                SELECT e2_id AS entry_id, access_vector FROM entries_relation
            ) AS all_access
            GROUP BY entry_id;
            """,
            reverse_sql="DROP MATERIALIZED VIEW IF EXISTS entry_access;",
        ),
        migrations.RunSQL(
            sql="""
            DROP INDEX IF EXISTS idx_entry_access_id;

            CREATE UNIQUE INDEX idx_entry_access_id ON entry_access(entry_id);
            """,
            reverse_sql="""
            DROP INDEX IF EXISTS idx_entry_access_id;
            """,
        ),
        # Recreate the materialized view with the `virtual` field
        migrations.RunSQL(
            sql="""
            CREATE MATERIALIZED VIEW edges AS
            (
                SELECT
                    ((e1_id::bigint << 32) | e2_id::bigint) AS id,
                    e1_id AS src,
                    e2_id AS dst,
                    BIT_AND(
                        CASE
                            WHEN inherit_av THEN
                                e1_av.access_vector & e2_av.access_vector
                            ELSE
                                entries_relation.access_vector
                        END
                    ) AS access_vector,
                    BOOL_OR(virtual) AS virtual,
                    MIN(created_at) AS created_at,
                    MAX(last_seen) AS last_seen,
                    EXTRACT(EPOCH FROM (now() - MAX(last_seen))) AS age
                FROM entries_relation
                LEFT JOIN entry_access e1_av ON entries_relation.e1_id = e1_av.entry_id
                LEFT JOIN entry_access e2_av ON entries_relation.e2_id = e2_av.entry_id
                GROUP BY e1_id, e2_id
            )
            UNION ALL
            (
                SELECT
                    ((e2_id::bigint << 32) | e1_id::bigint) AS id,
                    e2_id AS src,
                    e1_id AS dst,
                    BIT_AND(
                        CASE
                            WHEN inherit_av THEN
                                e1_av.access_vector & e2_av.access_vector
                            ELSE
                                entries_relation.access_vector
                        END
                    ) AS access_vector,
                    BOOL_OR(virtual) AS virtual,
                    MIN(created_at) AS created_at,
                    MAX(last_seen) AS last_seen,
                    EXTRACT(EPOCH FROM (now() - MAX(last_seen))) AS age
                FROM entries_relation
                LEFT JOIN entry_access e1_av ON entries_relation.e1_id = e1_av.entry_id
                LEFT JOIN entry_access e2_av ON entries_relation.e2_id = e2_av.entry_id
                GROUP BY e1_id, e2_id
            );
            """,
            reverse_sql="DROP MATERIALIZED VIEW IF EXISTS edges;",
        ),
    ]
