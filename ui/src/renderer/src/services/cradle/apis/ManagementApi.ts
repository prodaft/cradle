/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.8.0 (2.8.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ManagementActionResponse,
} from '../models/index';
import {
    ManagementActionResponseFromJSON,
    ManagementActionResponseToJSON,
} from '../models/index';

export interface ManagementActionsCreateRequest {
    actionName: string;
}

/**
 * 
 */
export class ManagementApi extends runtime.BaseAPI {

    /**
     * Executes various management actions for admin users. Available actions:relinkNotes, refreshMaterializedGraph, recalculateNodePositions, propagateAccessVectors, reprocessAllFiles, deleteHangingArtifacts
     * Execute management actions
     */
    async managementActionsCreateRaw(requestParameters: ManagementActionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementActionResponse>> {
        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling managementActionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/management/actions/{action_name}`;
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementActionResponseFromJSON(jsonValue));
    }

    /**
     * Executes various management actions for admin users. Available actions:relinkNotes, refreshMaterializedGraph, recalculateNodePositions, propagateAccessVectors, reprocessAllFiles, deleteHangingArtifacts
     * Execute management actions
     */
    async managementActionsCreate(requestParameters: ManagementActionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementActionResponse> {
        const response = await this.managementActionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts a nested JSON object to create or update multiple settings at once. Each key becomes a namespaced setting key like `notes.max_note_wordcount`.
     * Update one or more settings
     */
    async managementSettingsCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/management/settings/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Accepts a nested JSON object to create or update multiple settings at once. Each key becomes a namespaced setting key like `notes.max_note_wordcount`.
     * Update one or more settings
     */
    async managementSettingsCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.managementSettingsCreateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all known settings in a nested JSON format, including defaults for any missing values.
     * Get all settings with defaults
     */
    async managementSettingsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/management/settings/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all known settings in a nested JSON format, including defaults for any missing values.
     * Get all settings with defaults
     */
    async managementSettingsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.managementSettingsRetrieveRaw(initOverrides);
        return await response.value();
    }

}
