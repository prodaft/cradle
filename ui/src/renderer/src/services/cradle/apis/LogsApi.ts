/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.8.0 (2.8.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPaginatedEventLogSerializerResponseList,
} from '../models/index';
import {
    PaginatedPaginatedEventLogSerializerResponseListFromJSON,
    PaginatedPaginatedEventLogSerializerResponseListToJSON,
} from '../models/index';

export interface LogsListRequest {
    contentType?: string;
    endDate?: Date;
    objectId?: string;
    page?: number;
    startDate?: Date;
    type?: string;
    user?: string;
    username?: string;
}

/**
 * 
 */
export class LogsApi extends runtime.BaseAPI {

    /**
     * Returns a filtered list of event logs. Only available to admin users.
     * List event logs
     */
    async logsListRaw(requestParameters: LogsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPaginatedEventLogSerializerResponseList>> {
        const queryParameters: any = {};

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['objectId'] != null) {
            queryParameters['object_id'] = requestParameters['objectId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/logs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPaginatedEventLogSerializerResponseListFromJSON(jsonValue));
    }

    /**
     * Returns a filtered list of event logs. Only available to admin users.
     * List event logs
     */
    async logsList(requestParameters: LogsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPaginatedEventLogSerializerResponseList> {
        const response = await this.logsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
