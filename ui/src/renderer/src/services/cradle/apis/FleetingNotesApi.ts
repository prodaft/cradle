/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.8.0 (2.8.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileReferenceRequest,
  FleetingNote,
  FleetingNoteRetrieve,
  NoteRetrieve,
} from '../models/index';
import {
    FileReferenceRequestFromJSON,
    FileReferenceRequestToJSON,
    FleetingNoteFromJSON,
    FleetingNoteToJSON,
    FleetingNoteRetrieveFromJSON,
    FleetingNoteRetrieveToJSON,
    NoteRetrieveFromJSON,
    NoteRetrieveToJSON,
} from '../models/index';

export interface FleetingNotesCreateRequest {
    content: string;
    files?: Array<FileReferenceRequest>;
}

export interface FleetingNotesDestroyRequest {
    id: string;
}

export interface FleetingNotesFinalUpdateRequest {
    id: string;
    publishable?: boolean;
}

export interface FleetingNotesRetrieveRequest {
    id: string;
}

export interface FleetingNotesUpdateRequest {
    id: string;
    content: string;
    files?: Array<FileReferenceRequest>;
}

/**
 * 
 */
export class FleetingNotesApi extends runtime.BaseAPI {

    /**
     * Creates a new fleeting note for the authenticated user.
     * Create fleeting note
     */
    async fleetingNotesCreateRaw(requestParameters: FleetingNotesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FleetingNote>> {
        if (requestParameters['content'] == null) {
            throw new runtime.RequiredError(
                'content',
                'Required parameter "content" was null or undefined when calling fleetingNotesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['content'] != null) {
            formParams.append('content', requestParameters['content'] as any);
        }

        if (requestParameters['files'] != null) {
            formParams.append('files', requestParameters['files']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }


        let urlPath = `/fleeting-notes/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FleetingNoteFromJSON(jsonValue));
    }

    /**
     * Creates a new fleeting note for the authenticated user.
     * Create fleeting note
     */
    async fleetingNotesCreate(requestParameters: FleetingNotesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FleetingNote> {
        const response = await this.fleetingNotesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a fleeting note. Only the owner can delete it.
     * Delete fleeting note
     */
    async fleetingNotesDestroyRaw(requestParameters: FleetingNotesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fleetingNotesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fleeting-notes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a fleeting note. Only the owner can delete it.
     * Delete fleeting note
     */
    async fleetingNotesDestroy(requestParameters: FleetingNotesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fleetingNotesDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Converts a fleeting note to a regular note. Only the owner can convert it. Optionally specify if the note is publishable - defaults to not publishable if unspecified.
     * Convert fleeting note to regular note
     */
    async fleetingNotesFinalUpdateRaw(requestParameters: FleetingNotesFinalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteRetrieve>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fleetingNotesFinalUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['publishable'] != null) {
            formParams.append('publishable', requestParameters['publishable'] as any);
        }


        let urlPath = `/fleeting-notes/{id}/final/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteRetrieveFromJSON(jsonValue));
    }

    /**
     * Converts a fleeting note to a regular note. Only the owner can convert it. Optionally specify if the note is publishable - defaults to not publishable if unspecified.
     * Convert fleeting note to regular note
     */
    async fleetingNotesFinalUpdate(requestParameters: FleetingNotesFinalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteRetrieve> {
        const response = await this.fleetingNotesFinalUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all fleeting notes belonging to the authenticated user, ordered by timestamp in descending order. Note content is truncated to 200 characters for preview.
     * Get user\'s fleeting notes
     */
    async fleetingNotesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FleetingNoteRetrieve>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fleeting-notes/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FleetingNoteRetrieveFromJSON));
    }

    /**
     * Returns all fleeting notes belonging to the authenticated user, ordered by timestamp in descending order. Note content is truncated to 200 characters for preview.
     * Get user\'s fleeting notes
     */
    async fleetingNotesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FleetingNoteRetrieve>> {
        const response = await this.fleetingNotesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the full details of a specific fleeting note. Only the owner can access it.
     * Get fleeting note details
     */
    async fleetingNotesRetrieveRaw(requestParameters: FleetingNotesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FleetingNote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fleetingNotesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fleeting-notes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FleetingNoteFromJSON(jsonValue));
    }

    /**
     * Returns the full details of a specific fleeting note. Only the owner can access it.
     * Get fleeting note details
     */
    async fleetingNotesRetrieve(requestParameters: FleetingNotesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FleetingNote> {
        const response = await this.fleetingNotesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing fleeting note. Only the owner can update it. Content cannot be empty.
     * Update fleeting note
     */
    async fleetingNotesUpdateRaw(requestParameters: FleetingNotesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FleetingNote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling fleetingNotesUpdate().'
            );
        }

        if (requestParameters['content'] == null) {
            throw new runtime.RequiredError(
                'content',
                'Required parameter "content" was null or undefined when calling fleetingNotesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['content'] != null) {
            formParams.append('content', requestParameters['content'] as any);
        }

        if (requestParameters['files'] != null) {
            formParams.append('files', requestParameters['files']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }


        let urlPath = `/fleeting-notes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FleetingNoteFromJSON(jsonValue));
    }

    /**
     * Updates an existing fleeting note. Only the owner can update it. Content cannot be empty.
     * Update fleeting note
     */
    async fleetingNotesUpdate(requestParameters: FleetingNotesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FleetingNote> {
        const response = await this.fleetingNotesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
