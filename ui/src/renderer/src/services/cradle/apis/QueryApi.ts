/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.1 (2.7.1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntryResponse,
  PaginatedEntryResponseList,
} from '../models/index';
import {
    EntryResponseFromJSON,
    EntryResponseToJSON,
    PaginatedEntryResponseListFromJSON,
    PaginatedEntryResponseListToJSON,
} from '../models/index';

export interface QueryAdvancedListRequest {
    query: string;
    page?: number;
    pageSize?: number;
    wildcard?: boolean;
}

export interface QueryListRequest {
    name?: string;
    nameExact?: string;
    page?: number;
    pageSize?: number;
    referencedIn?: string;
    subtype?: string;
    type?: string;
}

/**
 * 
 */
export class QueryApi extends runtime.BaseAPI {

    /**
     * Allow a user to query entries they have access to using advanced syntax:`<subtype>:<name>` with wildcards and logical operators (&&, ||).
     * Advanced Query Entries
     */
    async queryAdvancedListRaw(requestParameters: QueryAdvancedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EntryResponse>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling queryAdvancedList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['wildcard'] != null) {
            queryParameters['wildcard'] = requestParameters['wildcard'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/query/advanced/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntryResponseFromJSON));
    }

    /**
     * Allow a user to query entries they have access to using advanced syntax:`<subtype>:<name>` with wildcards and logical operators (&&, ||).
     * Advanced Query Entries
     */
    async queryAdvancedList(requestParameters: QueryAdvancedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EntryResponse>> {
        const response = await this.queryAdvancedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allow a user to query entries they have access to by providing filters.
     * Query Entries
     */
    async queryListRaw(requestParameters: QueryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEntryResponseList>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameExact'] != null) {
            queryParameters['name_exact'] = requestParameters['nameExact'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['referencedIn'] != null) {
            queryParameters['referenced_in'] = requestParameters['referencedIn'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/query/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEntryResponseListFromJSON(jsonValue));
    }

    /**
     * Allow a user to query entries they have access to by providing filters.
     * Query Entries
     */
    async queryList(requestParameters: QueryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEntryResponseList> {
        const response = await this.queryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
