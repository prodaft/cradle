/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.8.0 (2.8.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPaginatedReportSerializerResponseList,
  PublishStrategiesResponse,
  Report,
  ReportRetryErrorResponse,
} from '../models/index';
import {
    PaginatedPaginatedReportSerializerResponseListFromJSON,
    PaginatedPaginatedReportSerializerResponseListToJSON,
    PublishStrategiesResponseFromJSON,
    PublishStrategiesResponseToJSON,
    ReportFromJSON,
    ReportToJSON,
    ReportRetryErrorResponseFromJSON,
    ReportRetryErrorResponseToJSON,
} from '../models/index';

export interface ReportsDestroyRequest {
    id: string;
}

export interface ReportsListRequest {
    page?: number;
    search?: string;
}

export interface ReportsPublishCreateRequest {
    noteIds: Array<string>;
    title: string;
    strategy: string;
    anonymized?: boolean;
}

export interface ReportsRetrieveRequest {
    id: string;
}

export interface ReportsRetryCreateRequest {
    id: string;
    strategy: ReportsRetryCreateStrategyEnum;
    title?: string;
    status?: ReportsRetryCreateStatusEnum;
    anonymized?: boolean;
    errorMessage?: string | null;
    extraData?: any | null;
}

export interface ReportsUpdateRequest {
    id: string;
    noteIds: Array<string>;
    title: string;
}

/**
 * 
 */
export class ReportsApi extends runtime.BaseAPI {

    /**
     * Deletes a specific report belonging to the authenticated user.
     * Delete report
     */
    async reportsDestroyRaw(requestParameters: ReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reportsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reports/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a specific report belonging to the authenticated user.
     * Delete report
     */
    async reportsDestroy(requestParameters: ReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reportsDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of published reports for the authenticated user, ordered by creation date descending. Can be filtered by search term matching report ID or title.
     * Get published reports
     */
    async reportsListRaw(requestParameters: ReportsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPaginatedReportSerializerResponseList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reports/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPaginatedReportSerializerResponseListFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of published reports for the authenticated user, ordered by creation date descending. Can be filtered by search term matching report ID or title.
     * Get published reports
     */
    async reportsList(requestParameters: ReportsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPaginatedReportSerializerResponseList> {
        const response = await this.reportsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new published report from selected notes using specified strategy.
     * Create published report
     */
    async reportsPublishCreateRaw(requestParameters: ReportsPublishCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters['noteIds'] == null) {
            throw new runtime.RequiredError(
                'noteIds',
                'Required parameter "noteIds" was null or undefined when calling reportsPublishCreate().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling reportsPublishCreate().'
            );
        }

        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling reportsPublishCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['noteIds'] != null) {
            formParams.append('note_ids', requestParameters['noteIds']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['strategy'] != null) {
            formParams.append('strategy', requestParameters['strategy'] as any);
        }

        if (requestParameters['anonymized'] != null) {
            formParams.append('anonymized', requestParameters['anonymized'] as any);
        }


        let urlPath = `/reports/publish/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Creates a new published report from selected notes using specified strategy.
     * Create published report
     */
    async reportsPublishCreate(requestParameters: ReportsPublishCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.reportsPublishCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns available upload and download strategies for publishing reports.
     * Get publish strategies
     */
    async reportsPublishRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishStrategiesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reports/publish/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishStrategiesResponseFromJSON(jsonValue));
    }

    /**
     * Returns available upload and download strategies for publishing reports.
     * Get publish strategies
     */
    async reportsPublishRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishStrategiesResponse> {
        const response = await this.reportsPublishRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of a specific report belonging to the authenticated user.
     * Get report details
     */
    async reportsRetrieveRaw(requestParameters: ReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reportsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reports/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Returns the details of a specific report belonging to the authenticated user.
     * Get report details
     */
    async reportsRetrieve(requestParameters: ReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.reportsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resets the report status, re-queues the generation task, and returns the updated report. Only works for failed reports - cannot retry reports that are currently processing or already completed.
     * Retry failed report generation
     */
    async reportsRetryCreateRaw(requestParameters: ReportsRetryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reportsRetryCreate().'
            );
        }

        if (requestParameters['strategy'] == null) {
            throw new runtime.RequiredError(
                'strategy',
                'Required parameter "strategy" was null or undefined when calling reportsRetryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['status'] != null) {
            formParams.append('status', requestParameters['status'] as any);
        }

        if (requestParameters['anonymized'] != null) {
            formParams.append('anonymized', requestParameters['anonymized'] as any);
        }

        if (requestParameters['strategy'] != null) {
            formParams.append('strategy', requestParameters['strategy'] as any);
        }

        if (requestParameters['errorMessage'] != null) {
            formParams.append('error_message', requestParameters['errorMessage'] as any);
        }

        if (requestParameters['extraData'] != null) {
            formParams.append('extra_data', new Blob([JSON.stringify(ReportToJSON(requestParameters['extraData']))], { type: "application/json", }));
                    }


        let urlPath = `/reports/{id}/retry/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Resets the report status, re-queues the generation task, and returns the updated report. Only works for failed reports - cannot retry reports that are currently processing or already completed.
     * Retry failed report generation
     */
    async reportsRetryCreate(requestParameters: ReportsRetryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.reportsRetryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing report with new notes and title.
     * Update report
     */
    async reportsUpdateRaw(requestParameters: ReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reportsUpdate().'
            );
        }

        if (requestParameters['noteIds'] == null) {
            throw new runtime.RequiredError(
                'noteIds',
                'Required parameter "noteIds" was null or undefined when calling reportsUpdate().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling reportsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['noteIds'] != null) {
            formParams.append('note_ids', requestParameters['noteIds']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }


        let urlPath = `/reports/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Updates an existing report with new notes and title.
     * Update report
     */
    async reportsUpdate(requestParameters: ReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.reportsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReportsRetryCreateStrategyEnum = {
    Catalyst: 'catalyst',
    Html: 'html',
    Plain: 'plain',
    Json: 'json'
} as const;
export type ReportsRetryCreateStrategyEnum = typeof ReportsRetryCreateStrategyEnum[keyof typeof ReportsRetryCreateStrategyEnum];
/**
 * @export
 */
export const ReportsRetryCreateStatusEnum = {
    Working: 'working',
    Done: 'done',
    Error: 'error'
} as const;
export type ReportsRetryCreateStatusEnum = typeof ReportsRetryCreateStatusEnum[keyof typeof ReportsRetryCreateStatusEnum];
