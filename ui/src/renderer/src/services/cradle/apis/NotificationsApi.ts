/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.9.5 (2.9.5)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UnreadNotifications,
} from '../models/index';
import {
    UnreadNotificationsFromJSON,
    UnreadNotificationsToJSON,
} from '../models/index';

export interface NotificationsUpdateRequest {
    notificationId: string;
    isMarkedUnread: boolean;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Returns the count of unread notifications for the authenticated user.
     * Get unread notifications count
     */
    async notificationsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnreadNotifications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnreadNotificationsFromJSON(jsonValue));
    }

    /**
     * Returns the count of unread notifications for the authenticated user.
     * Get unread notifications count
     */
    async notificationsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnreadNotifications> {
        const response = await this.notificationsRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the number of unread notifications for the authenticated user.
     * Unread Notifications Count
     */
    async notificationsUnreadCountRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnreadNotifications>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/unread-count/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnreadNotificationsFromJSON(jsonValue));
    }

    /**
     * Retrieve the number of unread notifications for the authenticated user.
     * Unread Notifications Count
     */
    async notificationsUnreadCountRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnreadNotifications> {
        const response = await this.notificationsUnreadCountRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a notification\'s read/unread status by providing its ID.
     * Update Notification
     */
    async notificationsUpdateRaw(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling notificationsUpdate().'
            );
        }

        if (requestParameters['isMarkedUnread'] == null) {
            throw new runtime.RequiredError(
                'isMarkedUnread',
                'Required parameter "isMarkedUnread" was null or undefined when calling notificationsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['isMarkedUnread'] != null) {
            formParams.append('is_marked_unread', requestParameters['isMarkedUnread'] as any);
        }


        let urlPath = `/notifications/{notification_id}/`;
        urlPath = urlPath.replace(`{${"notification_id"}}`, encodeURIComponent(String(requestParameters['notificationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update a notification\'s read/unread status by providing its ID.
     * Update Notification
     */
    async notificationsUpdate(requestParameters: NotificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.notificationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
