/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.9.5 (2.9.5)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserRetrieve
 */
export interface UserRetrieve {
    /**
     * 
     * @type {string}
     * @memberof UserRetrieve
     */
    readonly id?: string;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof UserRetrieve
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserRetrieve
     */
    email: string;
    /**
     * * `admin` - Admin
     * * `manager` - Manager
     * * `entrymanager` - Entry Manager
     * * `author` - User
     * @type {string}
     * @memberof UserRetrieve
     */
    role?: UserRetrieveRoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserRetrieve
     */
    twoFactorEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRetrieve
     */
    isActive?: boolean;
    /**
     * Whether to enable Vim keybindings in the editor
     * @type {boolean}
     * @memberof UserRetrieve
     */
    vimMode?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRetrieve
     */
    emailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRetrieve
     */
    readonly catalystApiKey?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRetrieve
     */
    readonly vtApiKey?: boolean;
    /**
     * Theme to use in the UI
     * 
     * * `dark` - Dark
     * * `light` - Light
     * @type {string}
     * @memberof UserRetrieve
     */
    theme?: UserRetrieveThemeEnum;
}


/**
 * @export
 */
export const UserRetrieveRoleEnum = {
    Admin: 'admin',
    Manager: 'manager',
    Entrymanager: 'entrymanager',
    Author: 'author'
} as const;
export type UserRetrieveRoleEnum = typeof UserRetrieveRoleEnum[keyof typeof UserRetrieveRoleEnum];

/**
 * @export
 */
export const UserRetrieveThemeEnum = {
    Dark: 'dark',
    Light: 'light'
} as const;
export type UserRetrieveThemeEnum = typeof UserRetrieveThemeEnum[keyof typeof UserRetrieveThemeEnum];


/**
 * Check if a given object implements the UserRetrieve interface.
 */
export function instanceOfUserRetrieve(value: object): value is UserRetrieve {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function UserRetrieveFromJSON(json: any): UserRetrieve {
    return UserRetrieveFromJSONTyped(json, false);
}

export function UserRetrieveFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRetrieve {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'],
        'email': json['email'],
        'role': json['role'] == null ? undefined : json['role'],
        'twoFactorEnabled': json['two_factor_enabled'] == null ? undefined : json['two_factor_enabled'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'vimMode': json['vim_mode'] == null ? undefined : json['vim_mode'],
        'emailConfirmed': json['email_confirmed'] == null ? undefined : json['email_confirmed'],
        'catalystApiKey': json['catalyst_api_key'] == null ? undefined : json['catalyst_api_key'],
        'vtApiKey': json['vt_api_key'] == null ? undefined : json['vt_api_key'],
        'theme': json['theme'] == null ? undefined : json['theme'],
    };
}

export function UserRetrieveToJSON(json: any): UserRetrieve {
    return UserRetrieveToJSONTyped(json, false);
}

export function UserRetrieveToJSONTyped(value?: Omit<UserRetrieve, 'id'|'catalyst_api_key'|'vt_api_key'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'username': value['username'],
        'email': value['email'],
        'role': value['role'],
        'two_factor_enabled': value['twoFactorEnabled'],
        'is_active': value['isActive'],
        'vim_mode': value['vimMode'],
        'email_confirmed': value['emailConfirmed'],
        'theme': value['theme'],
    };
}

