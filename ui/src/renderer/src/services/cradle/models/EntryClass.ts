/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.9.5 (2.9.5)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntryClass
 */
export interface EntryClass {
    /**
     * * `entity` - Entity
     * * `artifact` - Artifact
     * @type {string}
     * @memberof EntryClass
     */
    type: EntryClassTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    subtype: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    generativeRegex?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    regex?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    options?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryClass
     */
    format: string | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof EntryClass
     */
    readonly childrenDetail?: Array<{ [key: string]: any; }>;
}


/**
 * @export
 */
export const EntryClassTypeEnum = {
    Entity: 'entity',
    Artifact: 'artifact'
} as const;
export type EntryClassTypeEnum = typeof EntryClassTypeEnum[keyof typeof EntryClassTypeEnum];


/**
 * Check if a given object implements the EntryClass interface.
 */
export function instanceOfEntryClass(value: object): value is EntryClass {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('subtype' in value) || value['subtype'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    return true;
}

export function EntryClassFromJSON(json: any): EntryClass {
    return EntryClassFromJSONTyped(json, false);
}

export function EntryClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntryClass {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'subtype': json['subtype'],
        'description': json['description'] == null ? undefined : json['description'],
        'generativeRegex': json['generative_regex'] == null ? undefined : json['generative_regex'],
        'regex': json['regex'] == null ? undefined : json['regex'],
        'options': json['options'] == null ? undefined : json['options'],
        'prefix': json['prefix'] == null ? undefined : json['prefix'],
        'color': json['color'] == null ? undefined : json['color'],
        'format': json['format'],
        'childrenDetail': json['children_detail'] == null ? undefined : json['children_detail'],
    };
}

export function EntryClassToJSON(json: any): EntryClass {
    return EntryClassToJSONTyped(json, false);
}

export function EntryClassToJSONTyped(value?: Omit<EntryClass, 'children_detail'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'subtype': value['subtype'],
        'description': value['description'],
        'generative_regex': value['generativeRegex'],
        'regex': value['regex'],
        'options': value['options'],
        'prefix': value['prefix'],
        'color': value['color'],
        'format': value['format'],
    };
}

