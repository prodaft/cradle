/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.7.1 (2.7.1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EssentialUserRetrieve } from './EssentialUserRetrieve';
import {
    EssentialUserRetrieveFromJSON,
    EssentialUserRetrieveFromJSONTyped,
    EssentialUserRetrieveToJSON,
    EssentialUserRetrieveToJSONTyped,
} from './EssentialUserRetrieve';

/**
 * 
 * @export
 * @interface EventLog
 */
export interface EventLog {
    /**
     * 
     * @type {string}
     * @memberof EventLog
     */
    readonly id?: string;
    /**
     * 
     * @type {Date}
     * @memberof EventLog
     */
    readonly timestamp?: Date;
    /**
     * * `create` - Create
     * * `delete` - Delete
     * * `edit` - Edit
     * * `fetch` - Fetch
     * * `login` - Login
     * @type {string}
     * @memberof EventLog
     */
    type: EventLogTypeEnum;
    /**
     * 
     * @type {EssentialUserRetrieve}
     * @memberof EventLog
     */
    user: EssentialUserRetrieve;
    /**
     * 
     * @type {string}
     * @memberof EventLog
     */
    details?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof EventLog
     */
    readonly srcLog?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof EventLog
     */
    readonly contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof EventLog
     */
    readonly objectId?: string;
    /**
     * 
     * @type {string}
     * @memberof EventLog
     */
    readonly objectRepr?: string;
}


/**
 * @export
 */
export const EventLogTypeEnum = {
    Create: 'create',
    Delete: 'delete',
    Edit: 'edit',
    Fetch: 'fetch',
    Login: 'login'
} as const;
export type EventLogTypeEnum = typeof EventLogTypeEnum[keyof typeof EventLogTypeEnum];


/**
 * Check if a given object implements the EventLog interface.
 */
export function instanceOfEventLog(value: object): value is EventLog {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function EventLogFromJSON(json: any): EventLog {
    return EventLogFromJSONTyped(json, false);
}

export function EventLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventLog {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'type': json['type'],
        'user': EssentialUserRetrieveFromJSON(json['user']),
        'details': json['details'] == null ? undefined : json['details'],
        'srcLog': json['src_log'] == null ? undefined : json['src_log'],
        'contentType': json['content_type'] == null ? undefined : json['content_type'],
        'objectId': json['object_id'] == null ? undefined : json['object_id'],
        'objectRepr': json['object_repr'] == null ? undefined : json['object_repr'],
    };
}

export function EventLogToJSON(json: any): EventLog {
    return EventLogToJSONTyped(json, false);
}

export function EventLogToJSONTyped(value?: Omit<EventLog, 'id'|'timestamp'|'src_log'|'content_type'|'object_id'|'object_repr'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'user': EssentialUserRetrieveToJSON(value['user']),
        'details': value['details'],
    };
}

