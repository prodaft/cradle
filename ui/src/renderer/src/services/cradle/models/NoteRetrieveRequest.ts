/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.8.0 (2.8.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FileReferenceWithNoteRequest } from './FileReferenceWithNoteRequest';
import {
    FileReferenceWithNoteRequestFromJSON,
    FileReferenceWithNoteRequestFromJSONTyped,
    FileReferenceWithNoteRequestToJSON,
    FileReferenceWithNoteRequestToJSONTyped,
} from './FileReferenceWithNoteRequest';
import type { UserRetrieveRequest } from './UserRetrieveRequest';
import {
    UserRetrieveRequestFromJSON,
    UserRetrieveRequestFromJSONTyped,
    UserRetrieveRequestToJSON,
    UserRetrieveRequestToJSONTyped,
} from './UserRetrieveRequest';

/**
 * 
 * @export
 * @interface NoteRetrieveRequest
 */
export interface NoteRetrieveRequest {
    /**
     * 
     * @type {boolean}
     * @memberof NoteRetrieveRequest
     */
    publishable?: boolean;
    /**
     * * `healthy` - Healthy
     * * `processing` - Processing
     * * `warning` - Warning
     * * `invalid` - Invalid
     * @type {string}
     * @memberof NoteRetrieveRequest
     */
    status?: NoteRetrieveRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof NoteRetrieveRequest
     */
    statusMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof NoteRetrieveRequest
     */
    statusTimestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof NoteRetrieveRequest
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof NoteRetrieveRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteRetrieveRequest
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof NoteRetrieveRequest
     */
    metadata?: any | null;
    /**
     * 
     * @type {UserRetrieveRequest}
     * @memberof NoteRetrieveRequest
     */
    author: UserRetrieveRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof NoteRetrieveRequest
     */
    entries: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof NoteRetrieveRequest
     */
    editTimestamp?: Date | null;
    /**
     * 
     * @type {UserRetrieveRequest}
     * @memberof NoteRetrieveRequest
     */
    editor: UserRetrieveRequest;
    /**
     * 
     * @type {Date}
     * @memberof NoteRetrieveRequest
     */
    lastLinked?: Date | null;
    /**
     * 
     * @type {Array<FileReferenceWithNoteRequest>}
     * @memberof NoteRetrieveRequest
     */
    files: Array<FileReferenceWithNoteRequest>;
}


/**
 * @export
 */
export const NoteRetrieveRequestStatusEnum = {
    Healthy: 'healthy',
    Processing: 'processing',
    Warning: 'warning',
    Invalid: 'invalid'
} as const;
export type NoteRetrieveRequestStatusEnum = typeof NoteRetrieveRequestStatusEnum[keyof typeof NoteRetrieveRequestStatusEnum];


/**
 * Check if a given object implements the NoteRetrieveRequest interface.
 */
export function instanceOfNoteRetrieveRequest(value: object): value is NoteRetrieveRequest {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('entries' in value) || value['entries'] === undefined) return false;
    if (!('editor' in value) || value['editor'] === undefined) return false;
    if (!('files' in value) || value['files'] === undefined) return false;
    return true;
}

export function NoteRetrieveRequestFromJSON(json: any): NoteRetrieveRequest {
    return NoteRetrieveRequestFromJSONTyped(json, false);
}

export function NoteRetrieveRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): NoteRetrieveRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'publishable': json['publishable'] == null ? undefined : json['publishable'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusMessage': json['status_message'] == null ? undefined : json['status_message'],
        'statusTimestamp': json['status_timestamp'] == null ? undefined : (new Date(json['status_timestamp'])),
        'content': json['content'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'author': UserRetrieveRequestFromJSON(json['author']),
        'entries': json['entries'],
        'editTimestamp': json['edit_timestamp'] == null ? undefined : (new Date(json['edit_timestamp'])),
        'editor': UserRetrieveRequestFromJSON(json['editor']),
        'lastLinked': json['last_linked'] == null ? undefined : (new Date(json['last_linked'])),
        'files': ((json['files'] as Array<any>).map(FileReferenceWithNoteRequestFromJSON)),
    };
}

export function NoteRetrieveRequestToJSON(json: any): NoteRetrieveRequest {
    return NoteRetrieveRequestToJSONTyped(json, false);
}

export function NoteRetrieveRequestToJSONTyped(value?: NoteRetrieveRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'publishable': value['publishable'],
        'status': value['status'],
        'status_message': value['statusMessage'],
        'status_timestamp': value['statusTimestamp'] === null ? null : ((value['statusTimestamp'] as any)?.toISOString()),
        'content': value['content'],
        'title': value['title'],
        'description': value['description'],
        'metadata': value['metadata'],
        'author': UserRetrieveRequestToJSON(value['author']),
        'entries': value['entries'],
        'edit_timestamp': value['editTimestamp'] === null ? null : ((value['editTimestamp'] as any)?.toISOString()),
        'editor': UserRetrieveRequestToJSON(value['editor']),
        'last_linked': value['lastLinked'] === null ? null : ((value['lastLinked'] as any)?.toISOString()),
        'files': ((value['files'] as Array<any>).map(FileReferenceWithNoteRequestToJSON)),
    };
}

