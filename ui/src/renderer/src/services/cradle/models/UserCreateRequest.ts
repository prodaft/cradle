/* tslint:disable */
/* eslint-disable */
/**
 * CRADLE
 * Threat Intelligence Knowledge Management
 *
 * The version of the OpenAPI document: 2.9.5 (2.9.5)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof UserCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    catalystApiKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    vtApiKey?: string | null;
    /**
     * Whether to enable Vim keybindings in the editor
     * @type {boolean}
     * @memberof UserCreateRequest
     */
    vimMode?: boolean;
    /**
     * Theme to use in the UI
     * 
     * * `dark` - Dark
     * * `light` - Light
     * @type {string}
     * @memberof UserCreateRequest
     */
    theme?: UserCreateRequestThemeEnum;
    /**
     * Whether to use compact mode in the UI
     * @type {boolean}
     * @memberof UserCreateRequest
     */
    compactMode?: boolean;
}


/**
 * @export
 */
export const UserCreateRequestThemeEnum = {
    Dark: 'dark',
    Light: 'light'
} as const;
export type UserCreateRequestThemeEnum = typeof UserCreateRequestThemeEnum[keyof typeof UserCreateRequestThemeEnum];


/**
 * Check if a given object implements the UserCreateRequest interface.
 */
export function instanceOfUserCreateRequest(value: object): value is UserCreateRequest {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    return true;
}

export function UserCreateRequestFromJSON(json: any): UserCreateRequest {
    return UserCreateRequestFromJSONTyped(json, false);
}

export function UserCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'username': json['username'],
        'email': json['email'],
        'password': json['password'],
        'catalystApiKey': json['catalyst_api_key'] == null ? undefined : json['catalyst_api_key'],
        'vtApiKey': json['vt_api_key'] == null ? undefined : json['vt_api_key'],
        'vimMode': json['vim_mode'] == null ? undefined : json['vim_mode'],
        'theme': json['theme'] == null ? undefined : json['theme'],
        'compactMode': json['compact_mode'] == null ? undefined : json['compact_mode'],
    };
}

export function UserCreateRequestToJSON(json: any): UserCreateRequest {
    return UserCreateRequestToJSONTyped(json, false);
}

export function UserCreateRequestToJSONTyped(value?: UserCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'username': value['username'],
        'email': value['email'],
        'password': value['password'],
        'catalyst_api_key': value['catalystApiKey'],
        'vt_api_key': value['vtApiKey'],
        'vim_mode': value['vimMode'],
        'theme': value['theme'],
        'compact_mode': value['compactMode'],
    };
}

